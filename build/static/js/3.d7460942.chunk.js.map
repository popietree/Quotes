{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","status","sendRequest","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","length","addedCommentHandler","useCallback","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.d7460942.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { useEffect } from \"react\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { status, sendRequest, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      //pass to pathc componentto tell fecth comment to display when added\n      onAddedComment();\n    }\n  }, [onAddedComment, error, status]);\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const enteredText = commentTextRef.current.value;\n    //get quote id from props becaus the component is flexible and not tied to url\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useParams } from \"react-router\";\nimport { useEffect, useCallback } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport { stat } from \"fs\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\n\nconst Comments = () => {\n  const params = useParams();\n  const { quoteId } = params;\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  //load comments and pick which quote id\n  useEffect(() => {\n    //fetch comment\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  //show form\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />{\" \"}\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <a className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </a>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddedComment={addedCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\n\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  // CAN change to Match\n  // path={`/quotes/${params.quoteId}/comments`}\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}